#ports
    ON 0 //0 << 32
    READ 8589934592 //2 << 32
    SET_CONTROL_BLOCK 68719476736 //16 << 32
    KERNEL_START 128
    SET_INTERRUPT_TABLE_ADDRESS 7
    DATA_CACHE_CLEAR 18
    DATA_CACHE_FLUSH 19
    SIGNAL 1

    loadc #start r4             //load start of bootloader
    iret r4                     //return out of signal interrupt

#savedState
    data 0                      //pc
    data 0                      //device index

#controlBlock
    data 0                      //dev addr
    data 0                      //mem addr
    data 0                      //count

#start
// Set the interrupt vector table of the card
    loadc #interruptTable r6    //load address of interrupt vector table
    cmd SET_INTERRUPT_TABLE_ADDRESS r6//set the interruptTable address (this address is also the storage port)

// Turn storage device on
    loadc 8 r6                  //load device index
    loadc ON r10                //load ON command
    store r6 0 r10              //write out ON command
    cmd DATA_CACHE_FLUSH r6     //flush value
    loadc #_return1 r5          //load return label
    intr SIGNAL                 //signal device and wait
#_return1

// Set control block address
    loadc SET_CONTROL_BLOCK r10 //load set control block command
    loadc #controlBlock r9      //load addr of control block
    add r9 r10 r10              //add to create command
    store r6 0 r10              //write out SET_CONTROL_BLOCK command
    cmd DATA_CACHE_FLUSH r6     //flush value
    loadc #_return2 r5          //load return label
    intr SIGNAL                 //signal device and wait
#_return2

// Read kernel size
    loadc #controlBlock r9      //load addr of control block
    add r9 r1 r10               //calc addr of controlBlock.memAddr
    add r10 r1 r11              //calc addr of controlBlock.count
    store r9 0 r0               //set devAddr to be 0
    store r10 0 r11             //set memAddr to be the controlBlock.count
    store r11 0 r1              //set the count to be 1
    cmd DATA_CACHE_FLUSH r9     //flush value
    cmd DATA_CACHE_FLUSH r10    //flush value
    cmd DATA_CACHE_FLUSH r11    //flush value
    loadc READ r10              //load READ command
    store r6 0 r10              //write out READ command
    cmd DATA_CACHE_FLUSH r6     //flush value
    loadc #_return3 r5          //load return label
    intr SIGNAL                 //signal device and wait
#_return3

// Read kernel
    loadc #controlBlock r9      //load addr of control block
    add r9 r1 r10               //calc addr of controlBlock.memAddr
    add r10 r1 r11              //calc addr of controlBlock.count
    cmd DATA_CACHE_CLEAR r11    //clear value
    load r11 0 r12              //load size of kernel
    loadc KERNEL_START r13      //address to load kernel
    sub r12 r13 r12             //reduce size by KERNEL_START to skip padding
    store r9 0 r13              //set controlBlock.devAddr
    store r10 0 r13             //set controlBlock.memAddr
    store r11 0 r12             //set controlBlock.count
    cmd DATA_CACHE_FLUSH r9     //flush value
    cmd DATA_CACHE_FLUSH r10    //flush value
    cmd DATA_CACHE_FLUSH r11    //flush value
    loadc READ r10              //load READ command
    store r6 0 r10              //write out READ command
    cmd DATA_CACHE_FLUSH r6     //flush value
    loadc #_return4 r5          //load return label
    intr SIGNAL                 //signal device and wait
#_return4

    jez r0 #end                 //Jump into the Kernel

#interruptTable
    jez r0 #signalReceived
    jez r0 #signalDeviceAndWait

#signalDeviceAndWait
    signal r6                   //signal device
    //save state
    loadc #savedState r7        //load address of saved state
    store r7 0 r5               //save return address
    store r7 1 r6               //save device index
    loadc #sleep r4             //load addr of sleep
    iret r4                     //return from interrupt into sleep

#sleep
    sleep

#signalReceived
    //restore state
    loadc #savedState r7        //load address of saved state
    load r7 1 r6                //restore device index
    load r7 0 r5                //restore return address
    iret r5                     //return from interrupt

    padding 59
    data 32                     //test signature
#end
